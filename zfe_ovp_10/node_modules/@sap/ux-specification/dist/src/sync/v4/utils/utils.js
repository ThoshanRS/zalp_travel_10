"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.alignSchemaWithTemplateType = exports.findPageV4 = exports.addLineItemsTypeToSchema = void 0;
const utils_1 = require("../../common/utils");
const StableIdHelper_1 = require("./StableIdHelper");
const common_1 = require("../../common");
const ux_specification_types_1 = require("@sap/ux-specification-types");
/**
 * Processes a LineItem record of type DataFieldForAction during app schema generation
 * @param {LineItemDataForSchema} data: structure of input data
 * @param actions - actions definition in schema, parent object
 * @param lineItemPath - annotation path to the line item
 * @param lineItemRecord - actual record of the line item collection
 * @param recordIndex - record index in the collection
 */
function addActionRecordToSchema(data, actionsDefinition, lineItemPath, lineItemRecord, recordIndex) {
    // Action but not inline action
    if (lineItemRecord.Determining !== true) {
        //no footer bar -> toolbar action
        let actionDefinitionName;
        if (data.entitySet) {
            actionDefinitionName = ux_specification_types_1.DefinitionName.ViewTableColumnBasicAction;
        }
        else if (data.lineItemId.startsWith(ux_specification_types_1.DefinitionName.LineItemsOfView)) {
            actionDefinitionName = ux_specification_types_1.DefinitionName.ViewToolBarAction;
        }
        else if (data.lineItemId.startsWith(ux_specification_types_1.DefinitionName.LineItems)) {
            actionDefinitionName = ux_specification_types_1.DefinitionName.ToolBarAction;
        }
        else {
            actionDefinitionName = ux_specification_types_1.DefinitionName.ObjectPageToolBarAction;
        }
        const actionId = lineItemRecord.Action.replace('/', '::');
        const description = (0, utils_1.getDataFieldDescription)(lineItemRecord, data.entityType);
        const prefix = lineItemRecord.$Type.split(`${ux_specification_types_1.UIVOCABULARY}.`)[1];
        const propertyKey = (0, StableIdHelper_1.replaceSpecialChars)(lineItemRecord.Action);
        const actionDefinition = (actionsDefinition.properties[`${prefix}::${propertyKey}`] = {
            $ref: (0, common_1.getFacetDefinitionLink)(actionDefinitionName, (0, common_1.prepareRef)(actionId)),
            description
        });
        const { key, ns } = (0, common_1.getActionKey)(lineItemRecord.Action, true);
        actionDefinition[ux_specification_types_1.SchemaTag.propertyIndex] = recordIndex;
        actionDefinition[ux_specification_types_1.SchemaTag.dataType] = (0, common_1.determineDataType)(lineItemRecord);
        //keys
        actionDefinition[ux_specification_types_1.SchemaTag.keys] = [];
        if (lineItemRecord[ux_specification_types_1.SchemaKeyName.semanticObject]) {
            actionDefinition[ux_specification_types_1.SchemaTag.keys].push({
                name: ux_specification_types_1.SchemaKeyName.semanticObject,
                value: lineItemRecord[ux_specification_types_1.SchemaKeyName.semanticObject]
            });
        }
        actionDefinition[ux_specification_types_1.SchemaTag.keys].push({ name: ux_specification_types_1.SchemaKeyName.action, value: key });
        if (ns) {
            actionDefinition[ux_specification_types_1.SchemaTag.target] = ns;
        }
        actionDefinition[ux_specification_types_1.SchemaTag.annotationType] = lineItemRecord.$Type;
        const action = (0, common_1.parseSchemaDefinition)(actionDefinitionName, (0, common_1.prepareRef)(actionId), data.appSchema);
        action[ux_specification_types_1.SchemaTag.annotationPath] = `${lineItemPath}/${recordIndex}`;
    }
}
/**
 * Processes a LineItem record of type DataField during app schema generation
 * @param {LineItemDataForSchema} data: structure of input data
 * @param lineItem - object comprising the line item information:
 * { lineItemRecord, lineItemId, lineItemPath }
 * @param columnDefinitionName - Schema definition name for the column
 * @param recordIndex - record index in the collection
 */
function addLineItemRecordToSchema(data, lineItem, columnDefinitionName, recordIndex) {
    const lineItemId = lineItem['lineItemId'];
    const lineItemRecord = lineItem['lineItemRecord'];
    if (lineItemRecord['Target']?.['value']) {
        const regex = `@${(0, utils_1.findAlias)(ux_specification_types_1.UIVOCABULARY, data.oDataServiceAVT)}.`;
        lineItemRecord['Target']['value'] = lineItemRecord['Target']['value'].replace(regex, '@');
    }
    const schemaKey = (0, StableIdHelper_1.getStableIdPartFromDataField)(lineItemRecord);
    if (schemaKey) {
        const properties = data.appSchema.definitions[lineItemId].properties;
        properties[schemaKey] = {
            $ref: utils_1.DEFINITION_LINK_PREFIX + columnDefinitionName,
            description: (0, utils_1.getDataFieldDescription)(lineItemRecord, data.entityType)
        };
        properties[schemaKey][ux_specification_types_1.SchemaTag.annotationType] = lineItemRecord?.$Type;
        properties[schemaKey][ux_specification_types_1.SchemaTag.annotationPath] = `${lineItem['lineItemPath']}/${recordIndex}`;
        properties[schemaKey][ux_specification_types_1.SchemaTag.propertyIndex] = recordIndex;
        properties[schemaKey][ux_specification_types_1.SchemaTag.dataType] = (0, common_1.determineDataType)(lineItemRecord);
        (0, common_1.addKeyToDefinition)(lineItemRecord, properties, schemaKey);
    }
}
/**
 * Adds the line item definition, columns and actions to the app schema (for the list report or an object page section comprising a table)
 * @param {LineItemDataForSchema} data: structure comprising
 * - appSchema - the app specific schema that shall get enhanced
 * - lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * - entityType - the entity type as part of the AVT ConvertedMetadata
 * - oDataServiceAVT - complete service information, as returned by Annotation Vocabularies Tool
 * - lineItemId - in case of OP the parameter must be passed to distinguish the OP tables;
 *                in case of LR or ALP 'LineItems' is passed.
 * @param columnDefinitionName - name of the column definition, i.e. TableColumn or ObjectPageTableColumn
 */
function addLineItemsTypeToSchema(data, columnDefinitionName = ux_specification_types_1.DefinitionName.TableColumn) {
    // Add the correct lineItem definition
    const { actions, lineItemPath } = (0, common_1.addCommonLineItemDefinitions)(data.appSchema, data.lineItemAnnotation, data.entityType, data.lineItemId);
    if (!data.lineItemAnnotation) {
        return;
    }
    let i = 0;
    data.lineItemAnnotation.forEach((lineItemRecord) => {
        if ((lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* UIAnnotationTypes.DataFieldForAction */ ||
            lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* UIAnnotationTypes.DataFieldForIntentBasedNavigation */) &&
            (lineItemRecord.Inline !== true || lineItemRecord.Determining === true)) {
            addActionRecordToSchema(data, actions, lineItemPath, lineItemRecord, i);
        }
        else {
            const lineItem = { lineItemRecord, lineItemId: data.lineItemId, lineItemPath };
            const columnDefinition = lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* UIAnnotationTypes.DataFieldForAction */
                ? `${columnDefinitionName}Action`
                : columnDefinitionName;
            addLineItemRecordToSchema(data, lineItem, columnDefinition, i);
        }
        i++;
    });
}
exports.addLineItemsTypeToSchema = addLineItemsTypeToSchema;
/**
 * Find the relevant V4 page under the routing targets of manifest,json
 * @param pages - list of all pages in manifest
 * @param pageName - search criterion: page name
 * @param entitySet - search criterion: entity set
 * @param logger - logger for messages
 * @returns the page definition in manifest (if found)
 */
function findPageV4(pages, pageName, entitySet, logger) {
    let v4Page;
    if (entitySet) {
        for (const i in pages) {
            if (pages[i].options?.settings?.entitySet === entitySet.name &&
                (pages[i].name === pageName ||
                    (pageName === ux_specification_types_1.v4.FE_TEMPLATE_V4_ALP && pages[i].name === ux_specification_types_1.v4.FE_TEMPLATE_V4_LIST_REPORT))) {
                v4Page = pages[i];
                break;
            }
        }
    }
    return v4Page;
}
exports.findPageV4 = findPageV4;
/**
 * Depending on the template type, strip down the app schema so that only the relevant views are part of it
 * @param {Definition} appSchema - app specific JSON schema, to be adjusted
 * @param {GenerateAppSchemaParameters} generateParameters - object comprising all input parameters
 * @returns the right definition name for the table in the schema
 */
function alignSchemaWithTemplateType(appSchema, generateParameters) {
    let tableDefinitionName;
    const tableDefinition = appSchema.properties[ux_specification_types_1.PropertyName.table];
    if (generateParameters.templateType === ux_specification_types_1.TemplateType.AnalyticalListPageV4) {
        tableDefinitionName = ux_specification_types_1.DefinitionName.ALPTableView;
        delete tableDefinition.anyOf;
        tableDefinition.$ref = `${utils_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ALPTableView}`;
        delete appSchema.definitions[ux_specification_types_1.DefinitionName.Table];
        delete appSchema.definitions[ux_specification_types_1.DefinitionName.LRChartView];
        delete appSchema.definitions[ux_specification_types_1.DefinitionName.LRTableView];
        delete appSchema.definitions[ux_specification_types_1.DefinitionName.MultiTableModeV4];
    }
    else if (generateParameters.templateType === ux_specification_types_1.TemplateType.ListReportObjectPageV4) {
        tableDefinitionName = ux_specification_types_1.DefinitionName.Table;
        delete tableDefinition.anyOf;
        tableDefinition.$ref = `${utils_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.Table}`;
        appSchema.definitions[tableDefinitionName].properties[ux_specification_types_1.PropertyName.annotationPath][ux_specification_types_1.SchemaTag.hidden] = true;
        delete appSchema.definitions[ux_specification_types_1.DefinitionName.ALPTableView];
        appSchema.properties[ux_specification_types_1.PropertyName.defaultPath][ux_specification_types_1.SchemaTag.hidden] = true;
    }
    return tableDefinitionName;
}
exports.alignSchemaWithTemplateType = alignSchemaWithTemplateType;
//# sourceMappingURL=utils.js.map