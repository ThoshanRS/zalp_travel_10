"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppProvider = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const utils_1 = require("./utils");
class AppProvider {
    constructor(manifest, schemas, home, pages, version, settings, logger) {
        // Store controller names which should be handled latelly
        this.unhandledControllers = [];
        const schemaFile = (0, utils_1.getSchemaFilePath)(ux_specification_types_1.SchemaType.Application);
        this.app = {
            $schema: schemaFile.path,
            id: manifest['sap.app'].id,
            pages,
            home,
            target: {
                fioriElements: version,
                odata: version === ux_specification_types_1.FioriElementsVersion.v2 ? ux_specification_types_1.OdataVersion.v2 : ux_specification_types_1.OdataVersion.v4
            },
            ...(settings && { settings })
        };
        this.schemas = schemas;
        this.logger = logger;
    }
    /**
     * Create config files for app (app.json) and pages (pages/{name}.json).
     * This is basically a copy of createFiles optimized to be used in FTFS:
     * it always uses posix path notation with forward slash (/)
     * @param {ConvertedMetadata} oDataServiceAVT - Complete service information, as returned by annotation vocabularies tool
     * @returns app and page files as separate objects
     */
    createConfigFiles() {
        const pageConfigs = {};
        const appConfig = {};
        let page;
        // add schema reference to all pages
        for (const pageId in this.app.pages) {
            page = this.app.pages[pageId];
            if (page.config) {
                const config = page.config;
                if (page.pageType !== ux_specification_types_1.PageType.CustomPage) {
                    const schemaFile = (0, utils_1.getSchemaFilePath)(page.pageType, page.entitySet);
                    if (this.schemas[schemaFile.filename]) {
                        config.$schema = schemaFile.path;
                    }
                    else {
                        const genericSchemaFile = (0, utils_1.getSchemaFilePath)(page.pageType);
                        config.$schema = genericSchemaFile.path;
                    }
                    pageConfigs[`${ux_specification_types_1.DirName.Pages}/${pageId}.json`] = config;
                }
            }
        }
        // remove config before converting to JSON
        const app = JSON.parse(JSON.stringify(this.app));
        for (const pageId in app.pages) {
            delete app.pages[pageId].config;
        }
        appConfig[ux_specification_types_1.FileName.App] = app;
        return { appConfig, pageConfigs };
    }
}
exports.AppProvider = AppProvider;
//# sourceMappingURL=appProvider.js.map